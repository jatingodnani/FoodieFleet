generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  images      String[]
  main_image  String
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  location_id Int
  location    Location  @relation(fields: [location_id], references: [id])
  region_id   Int
  region      Region    @relation(fields: [region_id], references: [id])
  items       Item[]
  review      Review[]
  bookings    Booking[]
  tabels      Table[]
}

model Item {
  id   Int    @id @default(autoincrement())
  name String

  price         String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  description   String
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  restaurant Restaurant[]
}

model Region {
  id         Int          @id @default(autoincrement())
  name       String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  restaurant Restaurant[]
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  email      String   @unique
  phone      String
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  review     Review[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String?
  text          String
  rating        Float
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Booking {
  id               Int              @id @default(autoincrement())
  number_of_people Int
  booking_time     DateTime
  booking_email    String
  first_name       String
  last_name        String?
  booking_phone    String
  booking_occasion String?
  booking_request  String?
  restaurant_id    Int
  restaurant       Restaurant       @relation(fields: [restaurant_id], references: [id])
  table         Bookingontable[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model Table {
  id            Int              @id @default(autoincrement())
  seats         Int
  restaurant_id Int
  restaurant    Restaurant       @relation(fields: [restaurant_id], references: [id])
  bookings      Bookingontable[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
}

model Bookingontable {
  booking_id Int
  table_id   Int
  restaurant Table   @relation(fields: [table_id], references: [id])
  booking    Booking  @relation(fields: [booking_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}
